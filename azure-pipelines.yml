# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- feat/*

# YAML file in the main branch
schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - main

jobs:
- job: 'ParallelTesting'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    parallel: 1
  displayName: Run ReportPortal tests

  steps:
  - task: CmdLine@2
    displayName: Install Google Chrome
    inputs:
      script: |
        # Install Chrome dependencies
              sudo apt-get update
              sudo apt-get install -y libxss1 libappindicator1 libindicator7
        
              # Download and install Chrome
              wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
              sudo dpkg -i google-chrome-stable_current_amd64.deb
              sudo apt-get install -f
        
              # Verify Chrome installation
              google-chrome --version
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 6.8.0'
    inputs:
      versionSpec: 6.8.0
      checkLatest: true

  - task: DockerCompose@0
    inputs:
      dockerComposeFile: '**/docker-compose.yml'
      action: Run a Docker Compose command
      dockerComposeCommand: 'up -d --force-recreate'
      detached: false
      projectName: 'reportportal'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: 'ReportPortal.Automation/ReportPortal.BDD.Tests/ReportPortal.BDD.Tests.csproj'
      arguments: '--no-build --filter "FullyQualifiedName~ReportPortal.BDD.Tests.Features.FiltersAddFeature"'
  
  - task: CopyFiles@2
    displayName: 'Copy Screenshots'
    condition: failed()
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/ReportPortal.Automation/ReportPortal.BDD.Tests/bin/Debug/net6.0/screenshots'
      Contents: '**/*'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/Screenshots'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifacts'
    condition: failed()
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Screenshots'
      artifact: 'Screenshots'


  - task: CmdLine@2
    condition: always()
    displayName: Structure of folders
    inputs:
      script: |
        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)\1 /f
        
        echo "Build.ArtifactStagingDirectory:" 
        
        echo "$(Build.ArtifactStagingDirectory)"
        
        echo "Build.BinariesDirectory:" 
        
        echo "$(Build.BinariesDirectory)"
        
        echo "Build.SourcesDirectory:"
        
        echo "$(Build.SourcesDirectory) sources directory " 
        tree $(Build.SourcesDirectory)\1 /f